#!/usr/bin/env python
# This Python file uses the following encoding: utf-8
#
# Copyright 2013 Appspand

import sys
import time
import logging

# try:
# 	import insights
# except:
# 	print 'Insights is not installed'
# 	sys.exit()

from insights.datapro import __version__
from insights.datapro.system.daemon import Daemon
from insights.datapro.core import settings
from insights.datapro.system.runner import runner
from insights.datapro.backends.mongodb import backend

PIDFILE = '/var/run/dataprod.pid'
# Keep all log files in one place
LOGFILE = '/usr/local/insights/dataprod.log'

# Configure logging
logging.basicConfig(filename=LOGFILE,level=logging.DEBUG)
logger = logging.getLogger('dataprod')

class DataProDaemon(Daemon):

    # Add an empty dictionary on start/end to avoid chart bugs
    def empty(self):
        system_info_empty = runner.empty()
        try:
            backend.store_entries(system_info_empty)
        except Exception, e:
            logger.exception('Saving empty system info failed')

    # Executed on stop and restart
    def __del__(self):
        self.empty()

    def __init__(self, pidfile):
        super(DataProDaemon, self).__init__(pidfile)
        self.empty()

    def run(self):

        while True:
            system_info = runner.system()
            try:
                backend.store_entries(system_info)
            except Exception, e:
                logger.exception('Saving system info failed')

            process_info = runner.processes()

            try:
                backend.store_entries(process_info)
            except Exception, e:
                logger.exception('Saving process info failed')

            # Checks the system every 60 seconds
            time.sleep(settings.SYSTEM_CHECK_PERIOD)

if __name__ == "__main__":

    daemon = DataProDaemon(PIDFILE)

    if len(sys.argv) == 2:
        if 'start' == sys.argv[1]:
            try:
                daemon.start()
            except Exception, e:
                logger.exception("DataProD cant be started")
        elif 'stop' == sys.argv[1]:
            print "Stopping DataProDaemon ..."
            daemon.stop()
        elif 'restart' == sys.argv[1]:
            print "Restarting DataProDaemon ..."
            daemon.restart()
        elif 'status' == sys.argv[1]:
            try:
                pf = file(PIDFILE, 'r')
                pid = int(pf.read().strip())
                pf.close()
            except IOError:
                pid = None
            except SystemExit:
                pid = None

            if pid:
                print 'DataProDaemon {0} is running as pid {1}'.format(__version__, pid)
            else:
                print 'DataProDaemon is not running.'

        else:
            print "Unknown command"
            sys.exit(2)
            sys.exit(0)
    else:
        print "usage: %s start|stop|restart|status" % sys.argv[0]
        sys.exit(2)

